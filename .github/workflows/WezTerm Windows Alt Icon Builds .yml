name: WezTerm Windows Alt Icon Builds

on:
  schedule:
    - cron: "0 5 * * *"

  push:
    branches:
      - main
    paths:
      - "/alt-icons/*"

  workflow_dispatch:
    inputs:
      debugging:
        type: boolean
        required: false
        default: false

jobs:
  get-wezterm:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-wezterm-latest.outputs.version }}
      new_build_required: ${{ steps.get-wezterm-latest.outputs.new_build_required }}
    steps:

      - name: Get WezTerm Latest Release Version Tag
        id: get-wezterm-latest
        run: |
          version=$(
            curl -s "https://api.github.com/repos/wezterm/wezterm/releases/latest" \
              | jq -r '.tag_name'
          )

          # Output the tag name using the new syntax
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Get Last Built Version
        run: wget https://raw.githubusercontent.com/ocodo/wezterm-alt-windows-icon-builds/refs/heads/main/wezterm_version

      - name: Set release tag variable
        id: vars
        run: |
          echo "release_tag=${{ steps.get-wezterm-latest.outputs.version }}-alt-icons" >> $GITHUB_OUTPUT

      - name: Get WezTerm Windows Zip
        id: get-wezterm-zip
        run: |
          export wezterm_version="${{ steps.get-wezterm-latest.outputs.version }}"
          export last_built_version=$(< wezterm_version | tr -d '\n')
          echo "last_built_version=$last_built_version" >> $GITHUB_OUTPUT
          if [[ "$wezterm_version" != "$last_built_version" ]]; then
            echo "new_build_required=true" >> $GITHUB_OUTPUT
          else
            echo "new_build_required=false" >> $GITHUB_OUTPUT
          fi

          export wezterm_folder="WezTerm-windows-${wezterm_version}"
          echo "wezterm_folder=$wezterm_folder"

          export url="https://github.com/wezterm/wezterm/releases/download/${wezterm_version}/${wezterm_folder}.zip"
          echo "url=$url"

          curl -Lso wezterm-windows-temp.zip "$url"

          unzip wezterm-windows-temp.zip
          rm wezterm-windows-temp.zip
          mv $wezterm_folder wezterm

      - name: "Version ${{ steps.get-wezterm-latest.outputs.version }}"
        run: |
          cat <<EOD | tee -a $GITHUB_STEP_SUMMARY
          # WezTerm Windows Alt-Icons Build
          - Version: ${{ steps.get-wezterm-latest.outputs.version }}
          - Last Packaged Version: ${{ steps.get-wezterm-zip.outputs.last_built_version }}
          - New build required: ${{ steps.get-wezterm-zip.outputs.new_build_required }}
          EOD
      - uses: actions/upload-artifact@v4
        with:
          name: wezterm.zip
          path: wezterm
          retention-days: 2

  icon-matrix:
    needs: get-wezterm
    if: ${{ github.event_name == 'push' || needs.get-wezterm.outputs.new_build_required == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: "Checkout Local Repo"
        uses: actions/checkout@v4

      - name: Generate Icon Matrix
        id: set-matrix
        run: python3 scripts/generate_icon_matrix.py

      - id: upload-alt-icons
        uses: actions/upload-artifact@v4
        with:
          name: alt-icons.zip
          path: alt-icons
          retention-days: 2

  patch-wezterm-icon:
    needs:
      - get-wezterm
      - icon-matrix
    env:
      version: ${{ needs.get-wezterm.outputs.version }}
    strategy:
      matrix:
        icon: ${{ fromJson(needs.icon-matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt update && sudo apt install wine64 imagemagick

      - uses: actions/download-artifact@v4
        with:
          name: wezterm.zip
          path: wezterm

      - uses: actions/download-artifact@v4
        with:
          name: alt-icons.zip
          path: alt-icons

      - name: "Remote Debugging"
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debugging }}
        with:
          detached: true

      - name: "${{ matrix.icon.file }} → ${{ matrix.icon.ico }}"
        run: |
          export image="${{ matrix.icon.file }}"
          convert -background transparent -define icon:auto-resize="16,32,48,64,96,128,256" "$image" "${{ matrix.icon.ico }}"

      - name: "Create Zip Package with ${{ matrix.icon.ico }}"
        id: zip-windows-package
        run: |
          # Step 1: Set parameters
          WEZTERM_VERSION="${{ needs.get-wezterm.outputs.version }}"
          ICON_NAME="${{ matrix.icon.name }}"
          RCEDIT_URL="https://github.com/electron/rcedit/releases/download/v2.0.0/rcedit-x64.exe"
          RCEDIT_PATH="$HOME/rcedit-x64.exe"  # Path to store the downloaded rcedit
          NEW_FOLDER_NAME="WezTerm-windows-$ICON_NAME-$WEZTERM_VERSION"
          EXE_PATH="$NEW_FOLDER_NAME/wezterm-gui.exe"
          ICON_PATH="${{ matrix.icon.ico }}"

          # Step 2: Download rcedit if it doesn't exist
          if [ ! -f "$RCEDIT_PATH" ]; then
              echo "Downloading rcedit from $RCEDIT_URL"
              curl -L -o "$RCEDIT_PATH" "$RCEDIT_URL"
          else
              echo "rcedit already downloaded."
          fi

          # Step 3: Move the wezterm folder into the new folder
          echo "Processing $ICON_NAME..."
          mv wezterm $NEW_FOLDER_NAME

          # Step 4: Verify if the target exe exists
          if [ ! -f "$EXE_PATH" ]; then
              echo "Error: Target executable not found: $EXE_PATH"
              exit 1
          fi

          # Step 5: Use Wine to patch the executable icon with rcedit
          echo "Patching executable icon using rcedit: $EXE_PATH with icon $ICON_PATH"
          wine "$RCEDIT_PATH" "$EXE_PATH" --set-icon "$ICON_PATH"

          # Step 6: Verify if the patch was successful
          if [ $? -eq 0 ]; then
              echo "🎉 Done processing $ICON_NAME."
          else
              echo "❌ Failed to patch icon for $ICON_NAME."
              exit 1
          fi

      - name: "🍹 Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: "WezTerm-windows-${{ matrix.icon.name }}-${{ env.version }}.zip"
          path: "WezTerm-windows-${{ matrix.icon.name }}-${{ env.version }}"
          retention-days: 2

  publish:
    needs:
      - get-wezterm
      - patch-wezterm-icon
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/workflows/Create Release From Windows Artifacts.yml
        with:
          wezterm_version: ${{ needs.get-wezterm.outputs.version }}

  complete:
    needs:
      - publish
      - get-wezterm
    runs-on: ubuntu-latest
    if: ${{ needs.get-wezterm.outputs.new_build_required == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Update last built
        run: |
          echo "${{ needs.get-wezterm.outputs.version }}" > wezterm_version
          git add wezterm_version
          git commit "Built ${{ needs.get-wezterm.outputs.version }}"
          git push origin main
          echo "### Built ${{ needs.get-wezterm.outputs.version }}" >> $GITHUB_STEP_SUMMARY
