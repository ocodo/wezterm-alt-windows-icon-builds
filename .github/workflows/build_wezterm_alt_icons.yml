name: WezTerm Windows Alt Icon Builds

on:
  workflow_dispatch:
    inputs:
      debugging:
        type: boolean
        required: false
        default: false

jobs:
  Build-WezTerm-From-Source:

    runs-on: windows-latest
    steps:
      - name: "Checkout Local Repo"
        uses: actions/checkout@v4

      - name: "Remote Debugging"
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debugging }}
        with:
          detached: true

      - name: "Install Dependencies"
        shell: pwsh
        run: |
          Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression
          scoop bucket add extras

          scoop install imagemagick rcedit resource-hacker

      - name: "get_wezterm_zip"
        shell: bash
        run: |
          export wezterm_version="$(curl -sv "https://github.com/wezterm/wezterm/releases/latest" 2>&1 \
            | grep -Ei "< Location: https://github.com/wezterm/wezterm/releases/tag/.*$" \
            | sed -e "s|< Location: https://github.com/wezterm/wezterm/releases/tag/||")"

          echo "wezterm_version=$wezterm_version" | tee -a $GITHUB_OUTPUT

          export wezterm_windows_zip_url="https://github.com/wezterm/wezterm/releases/download/${wezterm_version}/WezTerm-windows-${wezterm_version}.zip"
          curl -Lso wezterm_windows.zip "$wezterm_windows_zip_url"
          unzip wezterm_windows.zip

      - name: "Create .ico files"
        shell: bash
        run: |
          for image in .alt-icons/*png
          do
            magick -background transparent -define icon:auto-resize="16,32,48,64,96,128,256" "$image" "${image/png/ico}"
          done

      - name: "Create Zip Packages of WezTerm with each Icon"
        shell: pwsh
        run: |
          # Import the wezterm_version from the previous step's output
          $wezterm_version = "${{ steps.get_wezterm_zip.outputs.wezterm_version }}"
          Write-Host "wezterm_version = $wezterm_version"

          # Set zip file name and folder name based on version
          $zipFile = "WezTerm-windows-$wezterm_version.zip"
          $extractedFolder = "WezTerm-windows-$wezterm_version"
          $altIconsDir = ".alt-icons"

          # Extract the zip file once
          Write-Host "Extracting $zipFile ..."
          Expand-Archive -Path $zipFile -DestinationPath . -Force

          # Process each .ico file in the .alt-icons directory
          Get-ChildItem -Path $altIconsDir -Filter "wezterm-icon-*.ico" | ForEach-Object {

              # Extract the unique part of the icon file name (e.g., 'Shine' from 'wezterm-icon-Shine.ico')
              $iconFileName = $_.Name
              if ($iconFileName -match '^wezterm-icon-(.+)\.ico$') {
                  $icoPart = $matches[1]
              }
              else {
                  Write-Warning "Skipping unexpected icon file name format: $iconFileName"
                  return
              }

              # New folder name combining version and icon part
              $newFolderName = "$extractedFolder-$icoPart"

              Write-Host "Processing icon '$icoPart'..."

              # Remove the existing folder if it exists
              if (Test-Path $newFolderName) {
                  Write-Host "Removing existing folder $newFolderName"
                  Remove-Item -Recurse -Force -Path $newFolderName
              }

              # Copy the extracted folder to the new folder
              Copy-Item -Path $extractedFolder -Destination $newFolderName -Recurse

              # Define the path to the executable and icon file
              $exePath = Join-Path -Path $newFolderName -ChildPath "wezterm-gui.exe"
              $iconPath = Join-Path -Path $altIconsDir -ChildPath $iconFileName

              # Use rcedit to patch the executable with the new icon
              Write-Host "Patching executable icon using rcedit: $exePath with icon $iconPath"
              rcedit.exe $exePath --set-icon $iconPath

              # Create a zip file from the new folder
              $zipOut = "$newFolderName.zip"
              if (Test-Path $zipOut) {
                  Write-Host "Removing existing zip $zipOut"
                  Remove-Item -Force $zipOut
              }

              Write-Host "Creating zip archive $zipOut ..."
              Compress-Archive -Path $newFolderName -DestinationPath $zipOut -Force

              Write-Host "Done processing $icoPart."
          }

          # Clean up: Remove the original zip and extracted folder, keeping only the new zip files
          Write-Host "Cleaning up original files..."
          Remove-Item -Force -Path $zipFile
          Remove-Item -Recurse -Force -Path $extractedFolder

          Write-Host "All icons processed and cleanup complete."

      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: "windows"
          if-no-files-found: ignore
          path: |
            WezTerm-*.zip
          retention-days: 5

