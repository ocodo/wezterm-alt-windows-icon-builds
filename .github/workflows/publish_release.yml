name: Create Release from Windows Artifacts

on:
  workflow_run:
    workflows: ["WezTerm Windows Alt Icon Builds"]
    types: [completed]

jobs:
  release:
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CONCLUSION: ${{ github.event.workflow_run.conclusion }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Exit - upstream failed
        run: |
          echo "ðŸ‘‰  Upstream conclusion: ${CONCLUSION-Unknown}"
          if [ "$CONCLUSION" != "success" ]; then
            echo "ðŸ¤· Upstream did not succeed. Cancelling this run..."
            gh api -X POST /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel
            echo "ðŸ’¤ Sleeping for 5 seconds to let the cancel take effect..."
            sleep 5
          else
            echo "ðŸš€  Upstream ok..."
          fi

      - name: Get latest wezterm tag
        id: wezterm_tag
        run: |
          tag=$(gh api repos/wezterm/wezterm/releases/latest --jq .tag_name)
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Get artifact list
        id: get-artifact-list
        run: |
          artifact_list="$(gh api \
            repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts \
            --jq '
            .artifacts[]
            | select(.name
            | test("^WezTerm-windows-.*zip$"))
            | [.name, .archive_download_url]
            | @tsv')"

          echo "artifact_list=$artifact_list" >> $GITHUB_ENV
          echo "artifact_count=$(echo "$artifact_list" | wc -l)" >> $GITHUB_ENV

      - name: Set release tag variable
        id: set-release-tag
        run: |
          echo "release_tag=${{ steps.wezterm_tag.outputs.tag }}-alt-icons" >> $GITHUB_OUTPUT

      - name: Check if release tag exists
        id: check_tag
        run: |
          export release_tag="${{ steps.set-release-tag.outputs.release_tag }}"
          echo "Checking for tag '${release_tag}' via GitHub API..."
          tags_json=$(gh api repos/${{ github.repository }}/releases --jq '.[].tag_name')

          # If no tags exist, just skip the check
          if [ -z "$tags_json" ]; then
            echo "No tags found, skipping release check."
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 0  # Exit OK early if no tags are found
          fi

          echo "Existing release tags:"
          echo "$tags_json"

          if [[ "${tags_json}" == *"${release_tag}"* ]]; then
            echo "ðŸ”Ž ${release_tag} exists in releases, comparing assets..."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag does not exist in releases"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Compare Release Assets
        if: ${{ steps.check_tag.outputs.exists == 'true' }}
        id: compare_assets
        run: |
          # TODO --
          echo "identical=true" >> $GITHUB_OUTPUT


          # Check current artifact count & hashes with assets.
          workflow_artifact_count=${{ steps.get-artifact-list.outputs.artifact_count }}

          # Check release asset count
          releases=$(gh api repos/${{ github.repository }}/releases --jq '.[].tag_name')


      - name: Identical Release Exists
        if: ${{ steps.check_tag.outputs.exists == 'true' && steps.compare_assets.outputs.identical == 'true' }}
        run: |
            echo "ðŸ¤· Release exits cancelling this run..."
            gh api -X POST /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel
            echo "ðŸ’¤ Sleeping for 5 seconds to let the cancel take effect..."
            sleep 5

      - name: Generate release notes
        env:
          WEZTERM_RELEASE: ${{ steps.wezterm_tag.outputs.tag }}
        run: |
          python3 scripts/py/generate_release_notes.py

      - name: Append to shipped.log.md
        run: |
          export datetime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "- shipped: $datetime - ${{ steps.set-release-tag.outputs.release_tag }}" >> SHIPPED.log.md
          git config user.name "alt-icons-actions"
          git config user.email "alt-icons@into.the.void"
          git add SHIPPED.log.md
          git commit -m "Shipped WezTerm Windows ${{ steps.set-release-tag.outputs.release_tag }} ${datetime}"

      - name: Create git tag on latest commit
        run: |
          git tag "${{ steps.set-release-tag.outputs.release_tag }}"
          git push origin "${{ steps.set-release-tag.outputs.release_tag }}"

      - name: Create release
        run: |
          gh release \
            create "${{ steps.set-release-tag.outputs.release_tag }}" \
              --title "WezTerm-Windows-${{ steps.set-release-tag.outputs.release_tag }}" \
              -F RELEASE.md

      - name: Download artifacts as zip files
        run: |
          mkdir artifacts
          echo "${{ steps.get-artifact-list.outputs.artifact-list }}"
            |
          while IFS=$'\t' read -r name url; do
            echo "ðŸ“¦ Downloading $name.zip"
            gh api "$url" > "artifacts/$name.zip"
          done

      - name: Upload artifacts to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for f in artifacts/*.zip; do
            gh release upload "${{ steps.set-release-tag.outputs.release_tag }}" "$f"
          done
