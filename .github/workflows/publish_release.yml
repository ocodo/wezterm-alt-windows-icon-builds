name: Create Release from Windows Artifacts

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
on:
  workflow_run:
    workflows: ["WezTerm Windows Alt Icon Builds"]
    types: [completed]

jobs:
  release:
    env:
      BUILD_ID: ${{ github.event.workflow_run.id }}
      ARTIFACTS_URL: ${{ github.event.workflow_run.artifacts_url }}
      CONCLUSION: ${{ github.event.workflow_run.conclusion }}
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
      - name: Upstream Summary
        run: |
          cat <<EOD >> $GITHUB_STEP_SUMMARY
          # Upstream Build Summary

          ### BUILD_ID

          **$BUILD_ID**

          ### ARTIFACTS_URL

          $ARTIFACTS_URL
          EOD
      - name: Exit - upstream failed
        run: |
          echo "👉  Upstream conclusion: ${CONCLUSION-Unknown}"
          if [ "$CONCLUSION" != "success" ]; then
            echo "🤷 Upstream did not succeed. Cancelling this run..." | tee -a $GITHUB_STEP_SUMMARY
            gh api -X POST /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/cancel
            echo "💤 Sleeping for 5 seconds to let the cancel take effect..."
            sleep 5
          else
            echo "🚀  Upstream ok..." | tee -a $GITHUB_STEP_SUMMARY
          fi

      - name: Get latest wezterm tag
        id: wezterm_tag
        run: |
          tag=$(gh api repos/wezterm/wezterm/releases/latest --jq .tag_name)
          echo "WezTerm Release Tag: $tag" | tee -a $GITHUB_STEP_SUMMARY
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Set release tag variable
        id: set_release_tag
        run: |
          export release_tag=${{ steps.wezterm_tag.outputs.tag }}-alt-icons"
          echo "release_tag=$release_tag >> $GITHUB_ENV
          echo "Internal Release Tag: $release_tag" | tee -a $GITHUB_STEP_SUMMARY

      - name: Check if release tag exists
        id: check_tag
        run: |
          echo "Checking for tag '${release_tag}' via GitHub API..."
          tags_json=$(gh api repos/${{ github.repository }}/releases --jq '.[].tag_name')

          if [ -z "$tags_json" ]; then
            echo "No tags found, skipping release check."
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "Existing release tags:"
            echo "$tags_json"

            if [[ "${tags_json}" == *"${release_tag}"* ]]; then
              echo "🔎 ${release_tag} exists in releases, comparing assets..."  | tee -a $GITHUB_STEP_SUMMARY
              echo "exists=true" >> $GITHUB_OUTPUT
            else
              echo "Tag does not exist in releases" | tee -a $GITHUB_STEP_SUMMARY
              echo "exists=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Check Existing Release Assets
        if: ${{ steps.check_tag.outputs.exists == 'true' }}
        id: compare_assets
        run: |
          # Fetch release assets matching the glob pattern and then use it for comparison.
          gh api repos/${{ github.repository }}/releases/tags/${release_tag} \
            --jq '.assets[] | select(.name | test("^WezTerm-Windows-.*zip$")) | .name' > assets.list

          gh api repos/${{ github.repository }}/actions/runs/${BUILD_ID}/artifacts \
            --jq '.artifacts[] | select(.name | test("^WezTerm-Windows-.*zip$")) | .name' > artifacts.list

          echo "Assets List (${release_tag})"  | tee -a $GITHUB_STEP_SUMMARY
          cat assets.list  | tee -a $GITHUB_STEP_SUMMARY

          echo "Artifacts List (${release_tag})"  | tee -a $GITHUB_STEP_SUMMARY
          cat artifacts.list | tee -a $GITHUB_STEP_SUMMARY

          # Convert workspace and compare artifacts
          if [ "$(wc -l < artifacts.list)" -eq "$(wc -l < assets.list)" ]; then
            echo "identical=true" >> $GITHUB_OUTPUT
          else
            echo "identical=false" >> $GITHUB_OUTPUT
            echo "⚠️ there are new artifacts - updating release"  | tee -a $GITHUB_STEP_SUMMARY
          fi

      - name: Identical Release Exists
        if: ${{ steps.check_tag.outputs.exists == 'true' && steps.compare_assets.outputs.identical == 'true' }}
        run: |
          echo "🤷 The release exists and assets are identical. Cancelling this run..."  | tee -a $GITHUB_STEP_SUMMARY
          gh api -X POST /repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/cancel
          echo "💤 Sleeping for 5 seconds to let the cancel take effect..."
          sleep 5

      - name: Generate release notes
        env:
          WEZTERM_RELEASE: ${{ steps.wezterm_tag.outputs.tag }}
        run: |
          python3 scripts/generate_release_notes.py > RELEASE.md

      - name: Append to shipped.log.md
        run: |
          if [ "${{ steps.check_tag.outputs.exists }}" == "true" ]; then
            export updating="[updating]"
          else
            export updating=""
          fi
          export datetime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "- shipped: $datetime - $release_tag $updating" >> SHIPPED.log.md
          git config user.name "alt-icons-actions"
          git config user.email "alt-icons@into.the.void"
          git add SHIPPED.log.md
          git commit -m "Shipped WezTerm Windows $release_tag ${datetime}"

      - name: Create git tag on latest commit
        if: ${{ steps.check_tag.outputs.exists != 'true' }}
        run: |
          git tag "$release_tag"
          git push origin "$release_tag"

      - name: Create release
        if: ${{ steps.check_tag.outputs.exists != 'true' }}
        run: |
          gh release \
            create "$release_tag" \
              --title "WezTerm-Windows-$release_tag" \
              -F RELEASE.md

      - name: Download artifacts as zip files
        run: |
          cat <<EOD >> $GITHUB_STEP_SUMMARY
          # Download artifacts

          EOD
          mkdir artifacts
          gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts \
          | \
          while IFS=$'\t' read -r name url; do
            echo "- 📦 Downloading $name.zip" | tee -a $GITHUB_STEP_SUMMARY
            gh api "$url" > "artifacts/$name.zip"
          done

      - name: Update Relase Notes
        if: ${{ steps.check_tag.outputs.exists == 'true' }}
        run: |
          gh release edit ${release_tag} -F RELEASE.md

      - name: Upload artifacts to release
        run: |
          cat <<EOD >> $GITHUB_STEP_SUMMARY
          # Upload artifacts

          EOD

          for artifact in artifacts/*.zip; do
            artifact_name=$(basename "$artifact")
            exists=$(echo "${{ steps.compare_assets.outputs.assets_list }}" | grep -q "^${artifact_name}$"; echo $?)
            if [ $exists -ne 0 ]; then
              gh release upload "${{ steps.set_release_tag.outputs.release_tag }}" "$artifact"
              echo "- uploaded: ${artifact}" | tee -a $GITHUB_STEP_SUMMARY
            else
              echo "- Skipping already uploaded: ${artifact}" | tee -a $GITHUB_STEP_SUMMARY
            fi
          done
