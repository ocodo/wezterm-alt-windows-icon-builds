name: Create Release from Windows Artifacts
description: ""
author: jasonm23

inputs:
  wezterm_version:
    description: "Current version of wezterm being repackaged"
    type: string
    required: true
  token:
    description: "GITHUB_TOKEN"
    type: string
    required: true

env:
  GH_TOKEN: ${{ inputs.token }}
  release_tag: ${{ inputs.wezterm_version }}-alt-icons

runs:
  using: "compostite"
  steps:
    - uses: actions/checkout@v4

    - name: Display Release Tag
      shell: bash
      run: |
        cat <<EOD | tee -a $GITHUB_STEP_SUMMARY
        # Release $release_tag

        EOD

    - name: Check if release tag exists
      shell: bash
      id: check_tag
      run: |
        echo "Checking for tag '${release_tag}' via GitHub API..." | tee -a $GITHUB_STEP_SUMMARY
        tags_json=$(gh api repos/${{ github.repository }}/releases --jq '.[].tag_name')

        if [[ -z "$tags_json" || ! "${tags_json}" == *"${release_tag}"* ]]; then
          echo "No existing release tag, creating new release." | tee -a $GITHUB_STEP_SUMMARY
          echo "exists=false" >> $GITHUB_OUTPUT
        else
          echo "Existing release tag found: $release_tag" | tee -a $GITHUB_STEP_SUMMARY
          echo "exists=true" >> $GITHUB_OUTPUT
        fi

    - name: Check Existing Release Assets
      shell: bash
      if: ${{ steps.check_tag.outputs.exists == 'true' }}
      id: compare_assets
      run: |
        gh api repos/${{ github.repository }}/releases/tags/${release_tag} --jq '.assets[] | .name' > assets.list
        gh api repos/${{ github.repository }}/actions/runs/${BUILD_ID}/artifacts --jq '.artifacts[] | .name' | grep -E -v '(alt-icons[.]zip|wezterm[.]zip)' > artifacts.list

        echo "assets_list=$(< assets_list)" >> $GITHUB_OUTPUT

        # Compare asset names with artifact names
        cat <<EOD | tee -a $GITHUB_STEP_SUMMARY
        ### Existing Release Assets
        $(< assets.list)

        ### Artifacts from Triggering Workflow
        $(< artifacts.list)
        EOD

        if [ "$(wc -l < artifacts.list)" -eq "$(wc -l < assets.list)" ]; then
          # Compare names (not content) of assets and artifacts
          if diff <(sort assets.list) <(sort artifacts.list); then
            echo "identical=true" >> $GITHUB_OUTPUT
          else
            echo "identical=false" >> $GITHUB_OUTPUT
            echo "⚠️ New artifacts found, release needs update." | tee -a $GITHUB_STEP_SUMMARY
          fi
        else
          echo "identical=false" >> $GITHUB_OUTPUT
          echo "⚠️ New artifacts found, release needs update." | tee -a $GITHUB_STEP_SUMMARY
        fi

    - name: Generate release notes
      shell: bash
      run: |
        python3 scripts/generate_release_notes.py > RELEASE.md

    - name: Append to SHIPPED.log.md
      shell: bash
      run: |
        datetime=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "- shipped: $datetime - $release_tag"  >> SHIPPED.log.md

        git config user.name "alt-icons-actions"
        git config user.email "alt-icons@into.the.void"
        git add SHIPPED.log.md
        git commit -m "Shipped WezTerm Windows $release_tag ${datetime}"
        git push

    - name: Create or move release tag on latest commit
      shell: bash
      run: |
        git tag --force "$release_tag"
        git push --tags --force

    - name: Upload artifacts to release
      shell: bash
      run: |
        for artifact in artifacts/*.zip; do
          artifact_name=$(basename "$artifact")
          exists=$(echo "${{ needs.release_logic.outputs.assets_list }}" | grep -q "^${artifact_name}$"; echo $?)
          if [ $exists -ne 0 ]; then
            gh release upload "$release_tag" "$artifact"
          fi
        done
